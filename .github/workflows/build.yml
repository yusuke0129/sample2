on:
  pull_request:
env:
    TERM: xterm-256color
    COMPOSE_FILE: docker-compose.yml
name: CI
# testaaaaaaaaaaaaazzzzaaaaa
jobs:
  docker-build:
      runs-on: ubuntu-latest
      outputs:
          docker_image_tag_ci: ${{ steps.generate_docker_image_tag.outputs.docker_image_tag_ci }}
      steps:
          -   name: Git Checkout
              uses: actions/checkout@v3
          -   name: Cache Docker Build Cache
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: docker-build-cache-${{ github.ref }}-${{ github.sha }}
                  restore-keys: |
                      docker-build-cache-${{ github.ref }}
                      docker-build-cache-
          -   name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v1
              with:
                  driver-opts: network=host
          -   name: Generate Docker Image Tag
              id: generate_docker_image_tag
              run: |
                  SHA=${{ github.sha }}
                  TAG=$(TZ=UTC-9 date '+%Y%m')-${SHA:0:7}
                  echo "DOCKER_IMAGE_TAG_CI=$TAG" >> $GITHUB_ENV
                  echo TAG $TAG
                  echo "::set-output name=docker_image_tag_ci::$TAG"
          -   name: Cache Docker Registry
              uses: actions/cache@v3
              with:
                  path: /tmp/docker-registry
                  key: docker-registry-${{ github.ref }}-${{ github.sha }}
                  restore-keys: |
                      docker-registry-${{ github.ref }}
                      docker-registry-
          -   name: Boot-up Local Docker Registry
              run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2
          -   name: Wait for Docker Registry
              run: npx wait-on tcp:5000
          -   name: Build Docker Image
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  docker buildx bake \
                      --builder="${{ steps.buildx.outputs.name }}" \
                      --set='*.cache-from=type=local,src=/tmp/.buildx-cache' \
                      --set='*.cache-to=type=local,dest=/tmp/.buildx-cache' \
                      --push \
                      -f "${COMPOSE_FILE}"

       
          - name: bundle install
            run: docker-compose run --rm app bundle install
    
          - name: db:create
            run: docker-compose run --rm app rails db:create RAILS_ENV=test

          - name: db:migrate
            run: docker-compose run --rm app rails db:migrate RAILS_ENV=test
            
          - name: rspec
             run: docker-compose run --rm app bundle exec rspec
  # build:
  #   name: build
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./
  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: docker/setup-buildx-action@v2

  #     - name: Cache Docker layers
  #       uses: actions/cache@v3
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}

  #     - uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: false
  #         Load: true
  #         tags: app:latest
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
  #     -  run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache   
  #     #   with:
  #     #     submodules: recursive
  #     # - uses: docker/setup-buildx-action@v2
  #     # - uses: docker/build-push-action@v4
  #     #   with:
  #     #     context: .
  #     #     tags: app:latest
  #     #     load: true
  #     #     cache-from: type=gha
  #     #     cache-to: type=gha,mode=max

  #     - run: docker-compose -f docker-compose.yml up -d

  #     - run: docker-compose run --rm app bundle install

  #     - run: docker-compose run --rm app rails db:create RAILS_ENV=test

  #     - run: docker-compose run --rm app rails db:migrate RAILS_ENV=test
  #     - run: docker-compose run --rm app bundle exec rspec


  # # rspec:
  # #   needs: build
  # #   runs-on: ubuntu-latest
  # #   defaults:
  # #     run:
  # #       working-directory: ./
  # #   steps:
  # #     - uses: actions/checkout@v2

  # #     - uses: satackey/action-docker-layer-caching@v0.0.11
  # #       with:
  # #         key: test
  # #       continue-on-error: true

  # #     - run: docker-compose run --rm app rails db:create RAILS_ENV=test

  # #     - run: docker-compose run --rm app rails db:migrate RAILS_ENV=test
  # #     - run: docker-compose run --rm app bundle exec rspec
  
  # # rubocop:
  # #   needs: build
  # #   runs-on: ubuntu-latest
  # #   defaults:
  # #     run:
  # #       working-directory: ./
  # #   steps:
  # #     - uses: actions/checkout@v2

  # #     - uses: satackey/action-docker-layer-caching@v0.0.11
  # #       continue-on-error: true

  # #     - run: docker-compose run --rm app bundle exec rubocop